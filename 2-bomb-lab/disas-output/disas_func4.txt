Dump of assembler code for function func4:
   0x0000000000400fce <+0>:     sub    $0x8,%rsp
   0x0000000000400fd2 <+4>:     mov    %edx,%eax  # v3 -> rax
   0x0000000000400fd4 <+6>:     sub    %esi,%eax  # v3 - v2 -> rax
   0x0000000000400fd6 <+8>:     mov    %eax,%ecx  # v3 - v2 -> rcx
   0x0000000000400fd8 <+10>:    shr    $0x1f,%ecx  # sign(v3 - v2)
   0x0000000000400fdb <+13>:    add    %ecx,%eax  # v3 - v2 + sign(v3 - v2) -> rax
   0x0000000000400fdd <+15>:    sar    %eax  # rax /= 2
   0x0000000000400fdf <+17>:    lea    (%rax,%rsi,1),%ecx  # rax + v2 -> rcx
   0x0000000000400fe2 <+20>:    cmp    %edi,%ecx  # 比较 rcx 与 v1
   0x0000000000400fe4 <+22>:    jle    0x400ff2 <func4+36>  # 若 rcx <= v1 则跳转
   0x0000000000400fe6 <+24>:    lea    -0x1(%rcx),%edx  # rcx - 1 -> v3
   0x0000000000400fe9 <+27>:    call   0x400fce <func4>  # 递归调用
   0x0000000000400fee <+32>:    add    %eax,%eax  # rax *= 2
   0x0000000000400ff0 <+34>:    jmp    0x401007 <func4+57>  # 返回 rax
   0x0000000000400ff2 <+36>:    mov    $0x0,%eax  # rax 清零
   0x0000000000400ff7 <+41>:    cmp    %edi,%ecx  # 比较 rcx 与 v1
   0x0000000000400ff9 <+43>:    jge    0x401007 <func4+57>  # 若 rcx >= v1 则跳转, 返回值 rax = 0
   0x0000000000400ffb <+45>:    lea    0x1(%rcx),%esi  # rcx + 1 -> v2
   0x0000000000400ffe <+48>:    call   0x400fce <func4>  # 递归调用
   0x0000000000401003 <+53>:    lea    0x1(%rax,%rax,1),%eax  # rax * 2 + 1 -> rax
   0x0000000000401007 <+57>:    add    $0x8,%rsp
   0x000000000040100b <+61>:    ret
End of assembler dump.
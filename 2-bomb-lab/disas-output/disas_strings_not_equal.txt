bool strings_not_equal(char *s1, char *s2){
   0x0000000000401338 <+0>:     push   %r12
   0x000000000040133a <+2>:     push   %rbp
   0x000000000040133b <+3>:     push   %rbx
   0x000000000040133c <+4>:     mov    %rdi,%rbx  # char *s1_t = s1;
   0x000000000040133f <+7>:     mov    %rsi,%rbp  # char *s2_t = s2;
   0x0000000000401342 <+10>:    call   0x40131b <string_length>  # int s1_length = string_length(s1);
   0x0000000000401347 <+15>:    mov    %eax,%r12d
   0x000000000040134a <+18>:    mov    %rbp,%rdi
   0x000000000040134d <+21>:    call   0x40131b <string_length>  # int s2_length = string_length(s2);
   0x0000000000401352 <+26>:    mov    $0x1,%edx  # bool result = 1;
   0x0000000000401357 <+31>:    cmp    %eax,%r12d
   0x000000000040135a <+34>:    jne    0x40139b <strings_not_equal+99>  # if(s1_length != s2_length) goto not_equal_1;üîª
   0x000000000040135c <+36>:    movzbl (%rbx),%eax
   0x000000000040135f <+39>:    test   %al,%al
   0x0000000000401361 <+41>:    je     0x401388 <strings_not_equal+80>  # if(!s1_t[0]) goto equal_1; // Âùá‰∏∫Á©∫Â≠óÁ¨¶‰∏≤üîª
   0x0000000000401363 <+43>:    cmp    0x0(%rbp),%al
   0x0000000000401366 <+46>:    je     0x401372 <strings_not_equal+58>  # if(s1_t[0] == s2_t[0]) goto begin_loop_1;üîª
   0x0000000000401368 <+48>:    jmp    0x40138f <strings_not_equal+87>  # goto not_equal_2;üîª
loop_1:
   0x000000000040136a <+50>:    cmp    0x0(%rbp),%al
   0x000000000040136d <+53>:    nopl   (%rax)  # Á©∫Êåá‰ª§, ‰ªÖÁî®‰∫éÂç†‰Ωç
   0x0000000000401370 <+56>:    jne    0x401396 <strings_not_equal+94>  # if(*s1_t != *s2_t) goto not_equal_3;üîª
begin_loop_1:
   0x0000000000401372 <+58>:    add    $0x1,%rbx  # s1_t++;
   0x0000000000401376 <+62>:    add    $0x1,%rbp  # s2_t++;
   0x000000000040137a <+66>:    movzbl (%rbx),%eax
   0x000000000040137d <+69>:    test   %al,%al
   0x000000000040137f <+71>:    jne    0x40136a <strings_not_equal+50>  # if(*s1_t) goto loop_1;üî∫
   0x0000000000401381 <+73>:    mov    $0x0,%edx  # result = 0;
   0x0000000000401386 <+78>:    jmp    0x40139b <strings_not_equal+99>  # return result;
equal_1:
   0x0000000000401388 <+80>:    mov    $0x0,%edx  # result = 0;
   0x000000000040138d <+85>:    jmp    0x40139b <strings_not_equal+99>  # return result;
not_equal_2:
   0x000000000040138f <+87>:    mov    $0x1,%edx  # result = 1;
   0x0000000000401394 <+92>:    jmp    0x40139b <strings_not_equal+99>  # return result;
not_equal_3:
   0x0000000000401396 <+94>:    mov    $0x1,%edx  # result = 1;
not_equal_1:
   0x000000000040139b <+99>:    mov    %edx,%eax  # return result;
   0x000000000040139d <+101>:   pop    %rbx
   0x000000000040139e <+102>:   pop    %rbp
   0x000000000040139f <+103>:   pop    %r12
   0x00000000004013a1 <+105>:   ret
}
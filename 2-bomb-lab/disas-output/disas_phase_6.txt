Dump of assembler code for function phase_6:
=> 0x00000000004010f4 <+0>:     push   %r14
   0x00000000004010f6 <+2>:     push   %r13
   0x00000000004010f8 <+4>:     push   %r12
   0x00000000004010fa <+6>:     push   %rbp
   0x00000000004010fb <+7>:     push   %rbx
   0x00000000004010fc <+8>:     sub    $0x50,%rsp  # 分配 80 字节的局部变量空间
   0x0000000000401100 <+12>:    mov    %rsp,%r13  # A_ptr = A;
   0x0000000000401103 <+15>:    mov    %rsp,%rsi  # 将 6 个数字读入数组 A (占用 24 个字节)
   0x0000000000401106 <+18>:    call   0x40145c <read_six_numbers>
   0x000000000040110b <+23>:    mov    %rsp,%r14  # A -> r14
   0x000000000040110e <+26>:    mov    $0x0,%r12d  # a = 0;
   0x0000000000401114 <+32>:    mov    %r13,%rbp  # A_tmp = A_ptr;
   0x0000000000401117 <+35>:    mov    0x0(%r13),%eax   # c = A_ptr[0];
   0x000000000040111b <+39>:    sub    $0x1,%eax  # c -= 1;
   0x000000000040111e <+42>:    cmp    $0x5,%eax
   0x0000000000401121 <+45>:    jbe    0x401128 <phase_6+52>  # if(c <= 5) goto <phase_6+52>;　// 注意这里是无符号的比较
   0x0000000000401123 <+47>:    call   0x40143a <explode_bomb>
   0x0000000000401128 <+52>:    add    $0x1,%r12d  # a += 1; // 对于任一 A[0 : a] 之间的数字 x 均满足 1 <= x <= 6
   0x000000000040112c <+56>:    cmp    $0x6,%r12d
   0x0000000000401130 <+60>:    je     0x401153 <phase_6+95>  # if(a == 6) goto <phase_6+95>;  // 如果读到 6 个则跳过下面的流程
   0x0000000000401132 <+62>:    mov    %r12d,%ebx  # a_tmp = a;  // 从 a 开始遍历
   0x0000000000401135 <+65>:    movslq %ebx,%rax
   0x0000000000401138 <+68>:    mov    (%rsp,%rax,4),%eax
   0x000000000040113b <+71>:    cmp    %eax,0x0(%rbp)
   0x000000000040113e <+74>:    jne    0x401145 <phase_6+81>  # if(A[a_tmp] != A_tmp[0]) goto <phase_6+81>;
   0x0000000000401140 <+76>:    call   0x40143a <explode_bomb>
   0x0000000000401145 <+81>:    add    $0x1,%ebx  # a_tmp += 1;
   0x0000000000401148 <+84>:    cmp    $0x5,%ebx
   0x000000000040114b <+87>:    jle    0x401135 <phase_6+65>  # if(a_tmp <= 5) goto <phase_6+65>;
   0x000000000040114d <+89>:    add    $0x4,%r13  # A_ptr++;
   0x0000000000401151 <+93>:    jmp    0x401114 <phase_6+32>

   0x0000000000401153 <+95>:    lea    0x18(%rsp),%rsi  # A_end = &A[6];
   0x0000000000401158 <+100>:   mov    %r14,%rax  # A_ptr_2 = A;
   0x000000000040115b <+103>:   mov    $0x7,%ecx  # d = 7;
   0x0000000000401160 <+108>:   mov    %ecx,%edx
   0x0000000000401162 <+110>:   sub    (%rax),%edx
   0x0000000000401164 <+112>:   mov    %edx,(%rax)  # A_ptr_2[0] = 7 - A_ptr_2[0];
   0x0000000000401166 <+114>:   add    $0x4,%rax  # A_ptr_2++;
   0x000000000040116a <+118>:   cmp    %rsi,%rax
   0x000000000040116d <+121>:   jne    0x401160 <phase_6+108>  # if(A_ptr_2 != A_end) goto <phase_6+108>;

/* linked list:
>>> x/12xg 0x6032d0
0x6032d0 <node1>:       0x000000010000014c      0x00000000006032e0
0x6032e0 <node2>:       0x00000002000000a8      0x00000000006032f0
0x6032f0 <node3>:       0x000000030000039c      0x0000000000603300
0x603300 <node4>:       0x00000004000002b3      0x0000000000603310
0x603310 <node5>:       0x00000005000001dd      0x0000000000603320
0x603320 <node6>:       0x00000006000001bb      0x0000000000000000
*/

   0x000000000040116f <+123>:   mov    $0x0,%esi  # i = 0;
   0x0000000000401174 <+128>:   jmp    0x401197 <phase_6+163>
   0x0000000000401176 <+130>:   mov    0x8(%rdx),%rdx  # linked_list_ptr = linked_list_ptr->next;
   0x000000000040117a <+134>:   add    $0x1,%eax  # e += 1;
   0x000000000040117d <+137>:   cmp    %ecx,%eax
   0x000000000040117f <+139>:   jne    0x401176 <phase_6+130>  # while(e < C[i]) goto <phase_6+130>;
   0x0000000000401181 <+141>:   jmp    0x401188 <phase_6+148>  # goto <phase_6+148>;
   0x0000000000401183 <+143>:   mov    $0x6032d0,%edx  # linked_list_ptr = 0x6032d0;
   0x0000000000401188 <+148>:   mov    %rdx,0x20(%rsp,%rsi,2)  # D[i * 2] = linked_list_ptr; // 由于整型数组 A 中每个元素占 4 位, 为了依次获取每个整数的最低有效字节需要对 i 依次增加 4, 而指针数组 D 中每个元素占 8 位, 为了同时使用 i 对 D 进行索引需要对 i 作 2 倍的伸缩
   0x000000000040118d <+153>:   add    $0x4,%rsi  # i += 4;
   0x0000000000401191 <+157>:   cmp    $0x18,%rsi
   0x0000000000401195 <+161>:   je     0x4011ab <phase_6+183>  # if(i == 24) goto <phase_6+183>;
   0x0000000000401197 <+163>:   mov    (%rsp,%rsi,1),%ecx  # rcx = C[i];  // C = (char *) A;
   0x000000000040119a <+166>:   cmp    $0x1,%ecx
   0x000000000040119d <+169>:   jle    0x401183 <phase_6+143>  # if(C[i] <= 1) goto <phase_6+143>; // 实际上 C[i] 必然 >= 1
   0x000000000040119f <+171>:   mov    $0x1,%eax  # e = 1;
   0x00000000004011a4 <+176>:   mov    $0x6032d0,%edx  # linked_list_ptr = 0x6032d0;
   0x00000000004011a9 <+181>:   jmp    0x401176 <phase_6+130>

   0x00000000004011ab <+183>:   mov    0x20(%rsp),%rbx  # linked_list *head = D[0];
   0x00000000004011b0 <+188>:   lea    0x28(%rsp),%rax  # linked_list **p = &D[1];
   0x00000000004011b5 <+193>:   lea    0x50(%rsp),%rsi  # linked_list **end = &D[6];
   0x00000000004011ba <+198>:   mov    %rbx,%rcx  # auto current_node = head;
   0x00000000004011bd <+201>:   mov    (%rax),%rdx
   0x00000000004011c0 <+204>:   mov    %rdx,0x8(%rcx)  # current_node->next = *p;
   0x00000000004011c4 <+208>:   add    $0x8,%rax  # p++;
   0x00000000004011c8 <+212>:   cmp    %rsi,%rax
   0x00000000004011cb <+215>:   je     0x4011d2 <phase_6+222>  # if(p == end) goto <phase_6+222>;
   0x00000000004011cd <+217>:   mov    %rdx,%rcx  # current_node = *p;
   0x00000000004011d0 <+220>:   jmp    0x4011bd <phase_6+201>

   0x00000000004011d2 <+222>:   movq   $0x0,0x8(%rdx)  # 令链表尾为 nullptr
   0x00000000004011da <+230>:   mov    $0x5,%ebp  # int count = 5;
   0x00000000004011df <+235>:   mov    0x8(%rbx),%rax
   0x00000000004011e3 <+239>:   mov    (%rax),%eax
   0x00000000004011e5 <+241>:   cmp    %eax,(%rbx)
   0x00000000004011e7 <+243>:   jge    0x4011ee <phase_6+250>  # if(head->val >= head->next->val) goto <phase_6+250>；
   0x00000000004011e9 <+245>:   call   0x40143a <explode_bomb>
   0x00000000004011ee <+250>:   mov    0x8(%rbx),%rbx  # head = head->next;
   0x00000000004011f2 <+254>:   sub    $0x1,%ebp  # count--;
   0x00000000004011f5 <+257>:   jne    0x4011df <phase_6+235>  # if(count) goto <phase_6+235>;
   0x00000000004011f7 <+259>:   add    $0x50,%rsp
   0x00000000004011fb <+263>:   pop    %rbx
   0x00000000004011fc <+264>:   pop    %rbp
   0x00000000004011fd <+265>:   pop    %r12
   0x00000000004011ff <+267>:   pop    %r13
   0x0000000000401201 <+269>:   pop    %r14
   0x0000000000401203 <+271>:   ret
End of assembler dump.